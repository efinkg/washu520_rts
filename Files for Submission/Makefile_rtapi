ifneq ($(KERNELRELEASE),)
# kbuild part of the makefile

ifeq ($(RTFLAGS),)
#include $(PWD)/../Makefile.inc
include $(HOME)/Documents/cse520/old_linux_cnc_2/linuxcnc-mirror/src/Makefile.inc
endif

obj-$(CONFIG_RTAPI) := rtapi.o
rtapi-objs := $(RTPREFIX)_rtapi.o

EXTRA_CFLAGS := $(RTFLAGS) -I/usr/include -D__MODULE__

else
# normal part of the makefile

# get the defs for CC, CFLAGS, LIB_DIR, etc.
include $(HOME)/Documents/cse520/old_linux_cnc_2/linuxcnc-mirror/src/Makefile.inc

# Public headers
HEADERS = \
procfs_macros.h \
rtapi.h \
rtapi_app.h

# Private headers
PRIVHDRS = \
rtapi_common.h \
rtapi_proc.h \
vsnprintf.h

# Sources
SRCS = \
$(RTPREFIX)_ulapi.c

ifneq ($(MODULE_EXT),.ko)

RT_SRCS = \
$(RTPREFIX)_rtapi.c \
mathstubs.c

# Libraries to be created
LIBS = \
$(RTLIB_DIR)/rtapi.o \
$(RTTMP_DIR)/mathstubs.o

endif 

LIBS += \
$(LIB_DIR)/ulapi.o 

all: rtapi.conf headers $(LIBS) modules examples

# Generic rules
include ../Make.rules

ifndef KDIR

# this doesn't work on debian where make-kpkg was at work
#KDIR := $(KERNELDIR)
KDIR := /lib/modules/$(shell uname -r)/build
endif

PWD := $(shell pwd)

# Only on kbuild build systems is it required to do the 'make modules'
# all older system build the traditional way
ifeq ($(BUILD_SYS),kbuild)

modules: headers
	$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) CC=$(CC) V=0 modules
	- cp *.ko $(RTLIB_DIR)/

modules_install: modules
	$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) CC=$(CC) V=0 modules_install
	depmod 2>/dev/null

else

modules:

modules_install:

endif

headers: def_headers
	(cd examples; make $@)

examples:
	(cd examples; make all)

indent: def_indent
	(cd examples; make $@)

depend: def_depend
	(cd examples; make $@)

# note that we always clean the examples, even if not
# configured to make them
clean: def_clean kclean
	(cd examples; make $@)
	- rm -f $(EMC2_HOME)/scripts/rtapi.conf

kclean:
	- rm -f .*.cmd *.o *.mod.* *.ko
	- rm -fR .tmp_versions
	# Delete the hard link to $(RTPREFIX)_rtapi.c
	- rm -f rtapi.c

# explicit rules to make libs from objs

ifneq ($(MODULE_EXT),.ko)
$(RTLIB_DIR)/rtapi.o : $(RTTMP_DIR)/$(RTPREFIX)_rtapi.o
	@ echo "Install rtapi.o in rtlib"
	- \install -p -m0664 $< $(RTLIB_DIR)/rtapi.o
endif

$(LIB_DIR)/ulapi.o : $(TMP_DIR)/$(RTPREFIX)_ulapi.o
	@ echo "Install ulapi.o in lib"
	- \install -p -m0664 $< $(LIB_DIR)/ulapi.o

# This is a list of the realtime modules provided by the OS
# that are to be loaded - Some will not be present on certain
# systems, but they still need to be listed if systems that do have
# them are to work.
RTAI_MOD="adeos rtai rt_mem_mgr rtai_sched rtai_fifos rtai_shm rtai_libm"
# For RTAI-3, we need to condsider using the RTAI scripts to load these modules.
RTAI3_MOD="adeos rtai_hal rtai_ksched rtai_fifos rtai_shm rtai_sem rtai_math"
RTAI3_RUN="emc2:ksched+fifos+shm+sem+math"
RTL_MOD="rtl mbuff rtl_time rtl_sched rtl_posixio rtl_fifo"

# This rule allows the user to type "make rtapi.conf".
# The real rule to make the rtapi.conf file has the
# full path as its target
rtapi.conf: $(EMC2_HOME)/scripts/rtapi.conf

# This rule actually makes rtapi.conf.  By including Makefile.inc
# as a dependency we insure that rtapi.conf is regenerated
# on the first "make" after running ./configure.
$(EMC2_HOME)/scripts/rtapi.conf: $(SRC_DIR)/Makefile.inc
	@ echo "Generate $@"
	@ echo "# DO NOT EDIT THIS FILE !" > $@
	@ echo "# Autogenerated by 'make' on `date`" >> $@
	@ echo  >> $@
	@ echo "# A few parameters from emc2/Makefile.inc" >>$@
	@ echo "EMC2_HOME='$(EMC2_HOME)'" >>$@
	@ echo "MAN_DIR='$(MAN_DIR)'" >> $@
	@ echo "KERNELDIR='$(KERNELDIR)'" >> $@
	@ echo "RTLIB_DIR='$(RTLIB_DIR)'" >> $@
	@ echo "MODULE_EXT='$(MODULE_EXT)'" >> $@
	@ echo  >> $@
	@ echo "# Sets the default DEBUG level" >> $@
	@ echo "DEBUG='3'" >> $@
	@ echo  >> $@
	@ echo "# Path to the realtime kernel modules" >> $@
	@ echo "MODPATH='$(moduledir)'"  >> $@
	@ echo >> $@
	@ echo "# List of realtime kernel modules to be loaded" >> $@
	@ if [ "$(RTAI)" = "3" ] ; then \
	    echo "MODULES='$(RTAI3_MOD)'" >> $@ ; \
	    echo "$(RTAI3_RUN)" > $(RTLIB_DIR)/.runinfo ; \
	    echo "RTAI='$(RTAI)'" >> $@ ; \
	    echo "RTAI_LOAD='$(RTDIR)/bin/rtai-load'" >> $@ ; \
	elif [ "$(RTPREFIX)" = "rtai" ] ; then \
	    echo "MODULES='$(RTAI_MOD)'" >> $@ ; \
	elif [ "$(RTPREFIX)" = "rtl" ] ; then \
	    echo "MODULES='$(RTL_MOD)'" >> $@ ; \
	  fi

# Hmm... this is a bit of a hack that needs a FIXME
#
# For installation, the fully qualified paths in the scripts need
# to get changed. 

RTAPICONFDIR=$(DESTDIR)/etc/emc2
RTAPICONF=$(RTAPICONFDIR)/rtapi.conf

install:
	install -d $(RTAPICONFDIR)
	@ echo "Generate $@"
	@ echo "# DO NOT EDIT THIS FILE !" > $(RTAPICONF)
	@ echo "# Autogenerated by 'make' on `date`" >> $(RTAPICONF)
	@ echo  >> $(RTAPICONF)
	@ echo "# A few parameters from emc2/Makefile.inc" >>$(RTAPICONF)
	@ echo "EMC2_HOME='$(prefix)'" >>$(RTAPICONF)
	@ echo "MAN_DIR='$(mandir)'" >> $(RTAPICONF)
	@ echo "KERNELDIR='$(KERNELDIR)'" >> $(RTAPICONF)
	@ echo "RTLIB_DIR='$(moduledir)'" >> $(RTAPICONF)
	@ echo  >> $(RTAPICONF)
	@ echo "# Sets the default DEBUG level" >> $(RTAPICONF)
	@ echo "DEBUG='3'" >> $(RTAPICONF)
	@ echo "MODPATH='$(moduledir)'"  >> $(RTAPICONF)
	@ echo "MODULE_EXT='$(MODULE_EXT)'" >> $(RTAPICONF)
	@ echo >> $(RTAPICONF)
	@ echo "# List of realtime kernel modules to be loaded" >> $(RTAPICONF)
	@ if [ "$(RTAI)" = "3" ] ; then \
	    echo "MODULES='$(RTAI3_MOD)'" >> $(RTAPICONF) ; \
	    echo "$(RTAI3_RUN)" > $(RTAPICONFDIR)/.runinfo ; \
	    echo "RTAI='$(RTAI)'" >> $(RTAPICONF) ; \
	    echo "RTAI_LOAD='$(RTDIR)/bin/rtai-load'" >> $(RTAPICONF) ; \
	elif [ "$(RTPREFIX)" = "rtai" ] ; then \
	    echo "MODULES='$(RTAI_MOD)'" >> $(RTAPICONF) ; \
	elif [ "$(RTPREFIX)" = "rtl" ] ; then \
	    echo "MODULES='$(RTL_MOD)'" >> $(RTAPICONF) ; \
	  fi


.PHONY: all examples headers depend indent install modules clean kclean

endif
